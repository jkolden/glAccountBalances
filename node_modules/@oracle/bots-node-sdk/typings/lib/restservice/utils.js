"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRestServiceEventHandlers = exports.invokeRestServiceEventHandlers = void 0;
/**
 * Invoke rest service event handlers
 * @param {RestServiceEventHandler} component - component instance
 * @param {RestServiceContext} context - context derived for this invocation
 * @private
 */
function invokeRestServiceEventHandlers(component, context) {
    return __awaiter(this, void 0, void 0, function* () {
        let logger = context.logger();
        let handlers = component.handlers();
        let event = context.getRequest().event;
        let eventName = event.name;
        let handler = handlers[eventName];
        if (handler) {
            // event handlers can be async (returning a promise), but we dont want to enforce
            // every event handler is async, hence Promise.resolve wrapping of invocation
            if (eventName === `transformRequestPayload`) {
                logger.debug(`Invoking event handler ${eventName}`);
                let returnValue = yield Promise.resolve(handler(event.properties, context));
                if (returnValue) {
                    context.setRequestPayload(returnValue);
                }
            }
            else if (eventName === `transformResponsePayload` || eventName === `transformErrorResponsePayload`) {
                logger.debug(`Invoking event handler ${eventName}`);
                let returnValue = yield Promise.resolve(handler(event.properties, context));
                if (returnValue) {
                    context.setResponsePayload(returnValue);
                }
            }
            else if (eventName === `validateResponsePayload`) {
                logger.debug(`Invoking event handler ${eventName}`);
                let returnValue = yield Promise.resolve(handler(event.properties, context));
                // make sure return value is a boolean
                let retValue = returnValue === undefined ? true : (returnValue + '' === 'true');
                logger.debug(`${eventName} returned ${retValue}`);
                context.getResponse().valid = retValue;
            }
        }
        else {
            logger.debug(`No handler found for event: ${eventName}`);
        }
    });
}
exports.invokeRestServiceEventHandlers = invokeRestServiceEventHandlers;
/**
 * Resolve the event handlers defined by the component
 * @param {RestServiceEventHandler} component - component implementation
 * @private
 */
function getRestServiceEventHandlers(component) {
    let events = [];
    let handlers = component.handlers();
    if (handlers) {
        Object.keys(handlers).forEach(key => {
            events.push(`${key}`);
        });
    }
    return events;
}
exports.getRestServiceEventHandlers = getRestServiceEventHandlers;
