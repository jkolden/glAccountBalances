"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CommandType = exports.CommandMessage = void 0;
const internal_1 = require("../internal");
/**
 * Represents a command message.
 * @extends NonRawMessage
 */
class CommandMessage extends internal_1.NonRawMessage {
    /**
     * Creates an instance of the CommandMessage class.
     * @param {CommandType} command The command type.
     */
    constructor(command) {
        super();
        this.type = 'command';
        this.command = command;
    }
    /**
     * Gets the command of the message.
     * @returns {CommandType} The command of the message.
     */
    getCommand() {
        return this.command;
    }
    /**
     * Sets the command of the message.
     * @param {CommandType} command The command to set.
     * @returns {this} The updated instance of the CommandMessage.
     */
    setCommand(command) {
        this.command = command;
        return this;
    }
    /**
     * Gets the properties of the message.
     * @returns {Map<string, any>} The properties of the message.
     */
    getProperties() {
        return this.properties;
    }
    /**
     * Gets the value of a property.
     * @param {string} propertyName The name of the property.
     * @returns {any} The property value.
     */
    getPropertyValue(propertyName) {
        return this.properties ? this.properties[propertyName] : undefined;
    }
    /**
     * Sets the properties of the message.
     * @param {Map<string, any>} properties The properties to set.
     * @returns {this} The updated instance of the CommandMessage.
     */
    setProperties(properties) {
        this.properties = properties;
        return this;
    }
    /**
     * Add a property to the message.
     * @param {string} name The name of the property.
     * @param {any} value The value of the property.
     * @returns {this} The updated instance of the CommandMessage.
     */
    addProperty(name, value) {
        if (!this.properties) {
            this.properties = new Map();
        }
        this.properties[name] = value;
        return this;
    }
}
exports.CommandMessage = CommandMessage;
/**
 * Represents the type of command.
 */
var CommandType;
(function (CommandType) {
    CommandType["repeat"] = "repeat";
    CommandType["readToMe"] = "readToMe";
    CommandType["speakSlowly"] = "speakSlowly";
    CommandType["volumeUp"] = "volumeUp";
    CommandType["volumeDown"] = "volumeDown";
    CommandType["mute"] = "mute";
    CommandType["unmute"] = "unmute";
    CommandType["startDictationMode"] = "startDictationMode";
    CommandType["stopDictationMode"] = "stopDictationMode";
    CommandType["startAmbientMode"] = "startAmbientMode";
    CommandType["stopAmbientMode"] = "stopAmbientMode";
    CommandType["startAudioRecording"] = "startAudioRecording";
    CommandType["stopAudioRecording"] = "stopAudioRecording";
    CommandType["repeatLouder"] = "repeatLouder";
    CommandType["repeatSlowly"] = "repeatSlowly";
    CommandType["humanAgent"] = "humanAgent";
    CommandType["hold"] = "hold";
    CommandType["resume"] = "resume";
    CommandType["goBack"] = "goBack";
    CommandType["home"] = "home";
    CommandType["exit"] = "exit";
    CommandType["startDoNotDisturbMode"] = "startDoNotDisturbMode";
    CommandType["stopDoNotDisturbMode"] = "stopDoNotDisturbMode";
})(CommandType = exports.CommandType || (exports.CommandType = {}));
