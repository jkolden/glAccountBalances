"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReadOnlyForm = void 0;
const internal_1 = require("../internal");
/**
 * Represents a read-only form.
 * @extends ChannelCustomizable
 */
class ReadOnlyForm extends internal_1.ChannelCustomizable {
    /**
     * Creates an instance of the ReadOnlyForm class.
     * @param {ReadOnlyField[]} [fields] The list of fields in the read-only form.
     */
    constructor(fields) {
        super();
        this.fields = [];
        if (fields) {
            this.fields = fields;
        }
    }
    // properties below will be added in 23.08
    // private selectAction?: Action;
    /**
     * Deserialize nested object properties into corresponding class instances
     */
    deserializeNestedProperties() {
        super.deserializeNestedProperties();
        if (this.voice) {
            this.voice = internal_1.MessageUtil.deserializeVoice(this.voice);
        }
        if (this.fields) {
            this.fields = internal_1.MessageUtil.deserializeFields(this.fields);
        }
        if (this.actions) {
            this.actions = internal_1.MessageUtil.deserializeActions(this.actions);
        }
    }
    /**
     * Gets the ID of the read-only form.
     * @returns {string} The ID of the read-only form.
     */
    getId() {
        return this.id;
    }
    /**
     * Sets the ID of the read-only form.
     * @param {string} id The ID to set.
     * @returns {ReadOnlyForm} The updated instance of the ReadOnlyForm.
     */
    setId(id) {
        this.id = id;
        return this;
    }
    /**
     * Gets the title of the read-only form.
     * @returns {string} The title of the read-only form.
     */
    getTitle() {
        return this.title;
    }
    /**
     * Sets the title of the read-only form.
     * @param {string} title The title to set.
     * @returns {ReadOnlyForm} The updated instance of the ReadOnlyForm.
     */
    setTitle(title) {
        this.title = title;
        return this;
    }
    /**
     * Gets the voice settings of the read-only form.
     * @returns {Voice} the voice settings of the read-only form.
     */
    getVoice() {
        return this.voice;
    }
    /**
     * Sets the voice settings of the read-only form.
     * @param {Voice} voice The voice to set.
     * @returns {ReadOnlyForm} The updated instance of the ReadOnlyForm.
     */
    setVoice(voice) {
        this.voice = voice;
        return this;
    }
    /**
     * Gets the list of fields in the read-only form.
     * @returns {ReadOnlyField[]} The list of fields in the read-only form.
     */
    getFields() {
        return this.fields;
    }
    /**
     * Sets the fields of the read-only form.
     * @param {ReadOnlyField[]} fields The fields to set.
     * @returns {ReadOnlyForm} The updated instance of the ReadOnlyForm.
     */
    setFields(fields) {
        this.fields = fields;
        return this;
    }
    /**
     * Adds a field to the read-only form.
     * @param {ReadOnlyField} field The field to add.
     * @returns {ReadOnlyForm} The updated instance of the ReadOnlyForm.
     */
    addField(field) {
        this.fields.push(field);
        return this;
    }
    /**
     * Gets the list of actions in the read-only form.
     * @returns {Action[]} The list of actions in the read-only form.
     */
    getActions() {
        return this.actions;
    }
    /**
     * Adds an action to the read-only form.
     * @param {Action} action The action to add.
     * @returns {ReadOnlyForm} The updated instance of the ReadOnlyForm.
     */
    addAction(action) {
        if (!this.actions) {
            this.actions = [];
        }
        this.actions.push(action);
        return this;
    }
}
exports.ReadOnlyForm = ReadOnlyForm;
